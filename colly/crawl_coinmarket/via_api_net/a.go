package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"time"
)

type AutoGenerated struct {
	Data struct {
		ExchangeTopSearchRanks []interface{} `json:"exchangeTopSearchRanks"`
		CryptoTopSearchRanks   []struct {
			ID                    int     `json:"id"`
			DataType              int     `json:"dataType"`
			Name                  string  `json:"name"`
			Symbol                string  `json:"symbol"`
			Slug                  string  `json:"slug"`
			Rank                  int     `json:"rank"`
			Status                string  `json:"status"`
			MarketCap             float64 `json:"marketCap"`
			SelfReportedMarketCap int     `json:"selfReportedMarketCap"`
			PriceChange           struct {
				Price          float64 `json:"price"`
				PriceChange24H float64 `json:"priceChange24h"`
				PriceChange7D  float64 `json:"priceChange7d"`
				PriceChange30D float64 `json:"priceChange30d"`
				Volume24H      float64 `json:"volume24h"`
			} `json:"priceChange"`
		} `json:"cryptoTopSearchRanks"`
		CryptoMostVisitedList []interface{} `json:"cryptoMostVisitedList"`
	} `json:"data"`
	Status struct {
		Timestamp    time.Time `json:"timestamp"`
		ErrorCode    string    `json:"error_code"`
		ErrorMessage string    `json:"error_message"`
		Elapsed      string    `json:"elapsed"`
		CreditCount  int       `json:"credit_count"`
	} `json:"status"`
}

func main() {

	proxy := func(_ *http.Request) (*url.URL, error) {
		return url.Parse("socks5://127.0.0.1:12999")
	}

	transport := &http.Transport{Proxy: proxy}

	client := &http.Client{Transport: transport}

	req, err := http.NewRequest("GET", "https://api.coinmarketcap.com/data-api/v3/topsearch/rank", nil)
	if err != nil {
		log.Fatal(err)
	}
	req.Header.Set("authority", "api.coinmarketcap.com")
	// req.Header.Set("sec-ch-ua", "" Not A;Brand";v="99", "Chromium";v="99", "Microsoft Edge";v="99"")
	req.Header.Set("accept", "application/json, text/plain, */*")
	req.Header.Set("platform", "web")
	req.Header.Set("sec-ch-ua-mobile", "?1")
	req.Header.Set("user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36 Edg/99.0.1150.39")
	req.Header.Set("x-request-id", "62f24a92-35f9-4cda-be48-3fe381aa1b27") //62f24a92-35f9-4cda-be48-3fe381aa1b27 "94ae8373-239b-4296-a353-15536d721619"
	req.Header.Set("sec-ch-ua-platform", "Windows")
	req.Header.Set("origin", "https://coinmarketcap.com")
	req.Header.Set("sec-fetch-site", "same-site")
	req.Header.Set("sec-fetch-mode", "cors")
	req.Header.Set("sec-fetch-dest", "empty")
	req.Header.Set("referer", "https://coinmarketcap.com/")
	req.Header.Set("accept-language", "zh-TW,zh-HK;q=0.9,zh;q=0.8,en;q=0.7,zh-CN;q=0.6,en-GB;q=0.5,en-US;q=0.4")
	// req.Header.Set("if-modified-since", "Wed, 16 Mar 2022 06:50:24 GMT")
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	bodyText, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	// fmt.Printf("%s\n", bodyText)

	v := AutoGenerated{}
	// var v interface{}
	json.Unmarshal(bodyText, &v)
	// fmt.Println(v.Data.CryptoTopSearchRanks)

	for _, _data := range v.Data.CryptoTopSearchRanks {
		fmt.Println(_data)
	}

	// data := v.(map[string]interface{})

	// for k, v := range data {
	// 	switch v := v.(type) {
	// 	case string:
	// 		fmt.Println(k, v, "(string)")
	// 	case float64:
	// 		fmt.Println(k, v, "(float64)")
	// 	case []interface{}:
	// 		fmt.Println(k, "(array):")
	// 		for i, u := range v {
	// 			fmt.Println("    ", i, u)
	// 		}
	// 	default:
	// 		fmt.Println(k, v, "(unknown)")
	// 	}
	// }

}
